1) Pre-conditions

Required Hardware: 

	Lab Machines from PHO 307: Lenovo ThinkCentre M91p workstations; 8GB ram; 3GHz 		Quad core processors; 24″ 1920×1200 Dell monitors; Centos 7


2) Supporting Files

Imported Libraries:

	Java.io
	h2-1.4.200
	Javalin
	Java.net
	Java.nio
	dbunit
	Junit
	Json

Unit Test descriptions:
	Located in src/test/

	-DatabaseExport.java: Test with checking connection to database and add table

	-GraphisomorphismUnit.java: Test with strong or weak isomorphism with molecules: 	salt, water, carbon dioxide...

	-FindMostSimilarUnitTest.java: Test with findmostsimilar function in arraylist of 	carbon dioxide, water, weirdmol1...

	-smallsystemtestes.java: Test inserting 2 isomorphic molecules into the database
													Searches weak/strong isomorphism for one of those molecules.
													
	-sqlunit.java: Test sql operations loading datasets and checking edges, atoms, 		molecules … rows 

	-externalParserUnit.java: Test the various external data parser functions (eg. grabbing molecule name, bond information, number of atoms...)

3) Instruction Steps 

I. Open the group9 project in Intelli-J
      	a. Set Up the Project Structure:
            	i. Java Language Level 8 
         	ii. SDK - 1.8
		iii. Set the output folder to the folder named out in the project root.
	b. Import maven projects 
	

II.
	Warning - Lab computers seem to default to Java 1.7. You will need to change that to Java 1.8.

	It is required to initialize the database before doing anything. 
	The H2DB library is contained in lib/h2/.
	We will be using lib/h2/bin/h2-1.4.200.jar to create and initialize our database..

	The database will be created and populated with some molecules with the following terminal command:
	./md --initdb.
	

	a. In order to run the command line interface simply run any of the commands:	

		./md --initdb (If you haven’t initialized the database than make sure to run this command first)

		./md --insertPubchem

		./md --insertTenMillion

		./md --findMolecule <name of the file that contains your molecule>

		./md --addMolecule <name of the file that contains your molecule>

		./md --findMostSimilar <name of the file that contains your molecule>

		./md help (to get more information of what commands to run)


		Here are some sample commands to get you started.
		./md --initdb
		./md --addMolecule carbon_dioxide.txt
		./md --addMolecule carbon_dioxide2.txt
		./md --findMolecule carbon_dioxide.txt

		The above commands will initialize the database, 
		insert two different versions of carbon dioxide,
		then search the database for an isomorphic graph
		corresponding to the structure listed in carbon_dioxide.txt

	b. --insertPubchem and --insertTenMillion run sql scripts to populate your database.

III. In order to run the web UI you need to do the following steps:
	a. Set Up an application (webApp.java):
		i. run the CLI commands to initialize the database if you haven't done so already. 
    ii. Run ./md --insertPubChem OR ./md --insertTenMillion to populate your database.
		iii. To run the webUI, the user has to have an internet connection because 		
			some APIs are restful commands. The webUI has its own standalone main in 		
			the intellij project called webApp. 
			After running the main, the url provided is http://localhost:7777/. 
			The user can search for isomorphic compounds by name if it exists in the H2DB database, search for isomorphic	compounds by file, and add compounds to the H2DB database by files.

IV. In order to run the Java GUI
	a. Edit configurations so that main class is set to app.java (java file in charge of GUI)
	b. Click on run button to run the GUI
	c. GUI will appear and you will have to select molecule by clicking on the "Select Molecule File" button  and click on the radio button to choose whichever operation you want (add or find) then click on perform action button. 
		i. The results will be displayed in the area above in graphical form and database statistics should be shown. 